/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Abdullah Al Awal
 */
public class Server extends javax.swing.JFrame {

    private ServerSocket serverSocket; // server socket
    private Socket connection; // connection to client
    private ArrayList<ClientManager> allClients = new ArrayList<ClientManager>();
    private ArrayList<String> available = new ArrayList<String>();
    private int connectionFlag, entryFlag = 0;
    private static Server server;
    private static Success success;
    private int cnt = 0;

    /**
     * Creates new form CreateServer
     */
    public Server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createServerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Create Server");

        createServerPanel.setBackground(new java.awt.Color(255, 255, 204));
        createServerPanel.setPreferredSize(new java.awt.Dimension(400, 500));
        createServerPanel.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setText("Create Server");
        createServerPanel.add(jLabel1);
        jLabel1.setBounds(140, 50, 130, 30);

        portField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                portFieldKeyTyped(evt);
            }
        });
        createServerPanel.add(portField);
        portField.setBounds(210, 190, 120, 30);

        okButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        createServerPanel.add(okButton);
        okButton.setBounds(150, 240, 90, 23);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Port Address : ");
        createServerPanel.add(jLabel2);
        jLabel2.setBounds(100, 190, 90, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createServerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createServerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        success = new Success(this);
        try {
            if (entryFlag == 0) {
                try // set up server to receive connections; process connections
                {
                    connectionFlag = 1;
                    serverSocket = new ServerSocket(Integer.parseInt(portField.getText()), 100); // create ServerSocket
                } catch (Exception e) {
                    connectionFlag = 0;
                    JOptionPane.showMessageDialog(null, "Port Address is invalid.", "Error", JOptionPane.ERROR_MESSAGE);
                    System.out.println("Exception in okButtonActionPerformed, after initializing the server variable");
                    e.printStackTrace();
                }

                if (connectionFlag == 1) {
                    server.getContentPane().remove(createServerPanel);
                    server.getContentPane().add(Success.createInfoPanel);
                    server.repaint();

                    portField.setEditable(false);

                    entryFlag = 1;

                    Thread thread = new Thread() {
                        public void run() {
                            try {
                                runServer();
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    };

                    thread.start();
                }
            } else {
                server.getContentPane().remove(createServerPanel);
                server.getContentPane().add(Success.createInfoPanel);
                server.repaint();
            }
        } catch (Exception e) {
            System.out.println("Exception in okButtonActionPerformed()");
            e.printStackTrace();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void portFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_portFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_portFieldKeyTyped

    // set up and run server 
    public void runServer() {

        while (true) {
            try {
                waitForConnection(); // wait for a connection
                allClients.add(new ClientManager(connection, this));
            } // end try
            catch (Exception e) //changed...............................
            {
                System.out.println("Exception in runserver method, after initializing the serverThread");
                e.printStackTrace();
            } // end catch
        }
    }

    private void waitForConnection() throws IOException {
        System.out.println("Waiting for connection...........");
        connection = serverSocket.accept(); // allow server to accept connection
        System.out.println("Connection receieved from client: " + connection.getInetAddress());
    }

    void checkClientName(ClientManager clientManager, String userName_) {
        for (String userName : available) {
            if (userName.equals(userName_)) {
                sendUserNameExistency(clientManager, 0);
                return;
            }
        }

        addClientName(userName_);
        sendUserNameExistency(clientManager, 1);
        updateAvailable();
    }

    synchronized void addClientName(String userName_) {
        System.out.println("addClientName():\nuserName : " + userName_);
        available.add(userName_);
    }

    public void sendUserNameExistency(ClientManager clientManager, int existence) {
        Data data = new Data();
        data.setType(7);
        data.setUserNameExistency(existence);
        clientManager.sendToThisClient(data);
    }

    public void deleteClient(String userName, ClientManager clientManager) {
        System.out.println("deleteClient()");
        System.out.println("available size(Before) : " + available.size());
        System.out.println("allClients size(Before) : " + allClients.size());
        available.remove(userName);
        allClients.remove(clientManager);
        updateAvailable();
        System.out.println("available size(After) : " + available.size());
        System.out.println("allClients size(After) : " + allClients.size());
    }

    void updateAvailable() {
        cnt++;
        System.out.println("updateAvailable():\ncnt : " + cnt);
        Data data = new Data();
        data.setType(2);
        data.setAvailable(available);
        System.out.println("available's length : " + available.size());
        for (ClientManager i : allClients) {
            i.sendToThisClient(data);
        }
    }

    synchronized public void interClientManagement(Data data) {
        String to = data.getTo();
        System.out.println("To: " + to);
        for (ClientManager i : allClients) {
            System.out.println("userName: " + i.getUserName());
            if (i.getUserName().equals(to)) {
                System.out.println("to milce.........");
                i.sendToThisClient(data);
                break;
            }
        }
    }

    private static void createObjects() {
        server = new Server();
        server.setLocationRelativeTo(null);
        server.setVisible(true);
        server.setResizable(false);
        server.setSize(405, 520);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    createObjects();
                } catch (Exception e) {
                    System.out.println("Exception in mainMethod");
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPanel createServerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField portField;
    // End of variables declaration//GEN-END:variables
}
